"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var applyStyleToYogaNode_1 = require("../yoga/applyStyleToYogaNode");
var __1 = require("..");
var transformToYogaNode = function (yoga, cache, node, yogaParent, childId) {
    var yogaNode = yoga.Node.create();
    cache.node = yogaNode;
    cache.nodeBatchId = node.nodeBatchId;
    if (node.width && node.height && !node.children) {
        yogaNode.setWidth(node.width);
        yogaNode.setHeight(node.height);
    }
    if (node.style) {
        applyStyleToYogaNode_1.applyStyleToYogaNode(yoga)(yogaNode, __1.StyleSheet.flatten(node.style));
    }
    if (node.children) {
        node.children.forEach(function (child, id) {
            var newCache = {};
            if (!cache.children) {
                cache.children = [];
            }
            cache.children.push(newCache);
            transformToYogaNode(yoga, newCache, child, yogaNode, id);
        });
    }
    if (yogaParent) {
        yogaParent.insertChild(yogaNode, childId);
    }
    return yogaNode;
};
var transformCache = function (cache) {
    var result = cache.node.getComputedLayout();
    return __assign({}, result, { nodeBatchId: cache.nodeBatchId }, (cache.children ? { children: cache.children.map(transformCache) } : {}));
};
exports.yogaWorker = function (yoga) { return function (message) {
    if (!message.value || message.value.type !== 'calculateLayout' || !yoga) {
        return;
    }
    var props = message.value.value;
    var cache = {};
    var yogaRoot = transformToYogaNode(yoga, cache, props, null, null);
    yogaRoot.calculateLayout(props.width, props.height, yoga.DIRECTION_LTR);
    var value = transformCache(cache);
    parent.postMessage({
        pluginMessage: {
            id: message.id,
            value: value
        }
    }, '*');
}; };
//# sourceMappingURL=yogaWorker.js.map