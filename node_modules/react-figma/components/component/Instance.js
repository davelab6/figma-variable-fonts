"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var transformLayoutStyleProperties_1 = require("../../styleTransformers/transformLayoutStyleProperties");
var useYogaLayout_1 = require("../../hooks/useYogaLayout");
var transformBlendProperties_1 = require("../../styleTransformers/transformBlendProperties");
var __1 = require("../..");
var all = require("../../index");
var useSelectionChange_1 = require("../../hooks/useSelectionChange");
var transformAutoLayoutToYoga_1 = require("../../styleTransformers/transformAutoLayoutToYoga");
var findNodeByName = function (children, name) {
    return children && children.find(function (child) { return child.name === name || findNodeByName(child.children, name); });
};
var getComponentByType = function (type) {
    var componentName = type.charAt(0) + type.substring(1).toLowerCase();
    return all[componentName];
};
exports.Instance = function (props) {
    var _a = React.useState(false), isHaveNode = _a[0], setHaveNode = _a[1];
    var nodeRef = React.useRef();
    useSelectionChange_1.useSelectionChange(nodeRef, props);
    var style = __assign({}, __1.StyleSheet.flatten(props.style), transformAutoLayoutToYoga_1.transformAutoLayoutToYoga(props));
    var componentProps = __assign({}, transformLayoutStyleProperties_1.transformLayoutStyleProperties(style), transformBlendProperties_1.transformBlendProperties(style), props, { style: style });
    var yogaProps = useYogaLayout_1.useYogaLayout(__assign({ nodeRef: nodeRef }, componentProps));
    return (React.createElement("instance", __assign({}, componentProps, yogaProps, { innerRef: nodeRef, innerRefCallback: function () { return setHaveNode(true); } }), isHaveNode && props.overrides
        ? Object.keys(props.overrides).map(function (overrideName) {
            var instanceItemNode = findNodeByName(nodeRef.current.children, overrideName);
            if (instanceItemNode) {
                var Component = getComponentByType(instanceItemNode.type);
                return (React.createElement(Component, __assign({ key: overrideName, preventResizing: true, node: instanceItemNode }, props.overrides[overrideName])));
            }
        })
        : null));
};
//# sourceMappingURL=Instance.js.map