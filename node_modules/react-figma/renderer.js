"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var renderers = require("./renderers");
// * Development version of react-reconciler can't be used inside Figma realm.
var createReconciler = require("react-reconciler/cjs/react-reconciler.production.min");
var yogaStream_1 = require("./yoga/yogaStream");
var isReactFigmaNode_1 = require("./isReactFigmaNode");
var useTextChildren_1 = require("./hooks/useTextChildren");
var lastPage;
var cleanGroupStubElement = function (parentNode) {
    if (parentNode.type === 'GROUP') {
        parentNode.children.forEach(function (child) {
            if (child.getPluginData('isGroupStubElement')) {
                child.remove();
            }
        });
    }
};
var setTextInstance = function (parentNode, childNode) {
    childNode.parent = parentNode;
    useTextChildren_1.setTextChildren(parentNode, childNode.value);
};
var appendToContainer = function (parentNode, childNode) {
    if (!childNode || !parentNode || parentNode.type === 'INSTANCE') {
        return;
    }
    if (childNode.type === 'TEXT_CONTAINER') {
        if (parentNode.type === 'TEXT') {
            setTextInstance(parentNode, childNode);
        }
    }
    else {
        parentNode.appendChild(childNode);
    }
    cleanGroupStubElement(parentNode);
};
var insertToContainer = function (parentNode, newChildNode, beforeChildNode) {
    if (!parentNode || !newChildNode || !beforeChildNode || parentNode.type === 'INSTANCE') {
        return;
    }
    if (newChildNode.type === 'TEXT_CONTAINER') {
        if (parentNode.type === 'TEXT') {
            setTextInstance(parentNode, newChildNode);
        }
    }
    else {
        var beforeChildIndex = parentNode.children.indexOf(beforeChildNode);
        parentNode.insertChild(beforeChildIndex, newChildNode);
    }
    cleanGroupStubElement(parentNode);
};
var remove = function (childNode) {
    if (!childNode || childNode.removed) {
        return;
    }
    childNode.remove();
};
var renderInstance = function (type, node, props) {
    var instance = renderers[type](node)(props);
    if (!node) {
        instance.setPluginData('isReactFigmaNode', 'true');
    }
    if (type === 'page' && props.isCurrent) {
        lastPage = instance;
    }
    return instance;
};
var getFirstChild = function (parentInstance) {
    if (parentInstance.children && parentInstance.children.length > 0) {
        return parentInstance.children.find(isReactFigmaNode_1.isReactFigmaNode);
    }
};
var getNextChildren = function (instance) {
    if (!instance || !instance.parent) {
        return;
    }
    var parent = instance.parent;
    var instanceIndex = parent.children.indexOf(instance);
    return parent.children.slice(instanceIndex + 1).find(isReactFigmaNode_1.isReactFigmaNode);
};
var checkInstanceMatchType = function (instance, type) {
    if (instance.type.toLowerCase() === type) {
        return true;
    }
    if (instance.type === 'FRAME' && type === 'svg') {
        return true;
    }
    return false;
};
exports.render = function (jsx, rootNode) { return __awaiter(_this, void 0, void 0, function () {
    var HostConfig, reconciler, container, tempPage;
    return __generator(this, function (_a) {
        HostConfig = {
            now: Date.now,
            getRootHostContext: function () {
                return true;
            },
            prepareForCommit: function () { },
            resetAfterCommit: function () { },
            getChildHostContext: function () {
                return true;
            },
            shouldSetTextContent: function () { return false; },
            getPublicInstance: function (instance) {
                return instance;
            },
            createInstance: function (type, props) {
                return renderInstance(type, null, props);
            },
            createTextInstance: function (text, rootContainerInstance, hostContext, internalInstanceHandle) {
                return { type: 'TEXT_CONTAINER', value: text };
            },
            resetTextContent: function () { },
            appendInitialChild: function (parentNode, childNode) {
                appendToContainer(parentNode, childNode);
            },
            appendChild: function (parentNode, childNode) {
                appendToContainer(parentNode, childNode);
            },
            insertBefore: function (parentNode, newChildNode, beforeChildNode) {
                insertToContainer(parentNode, newChildNode, beforeChildNode);
            },
            finalizeInitialChildren: function (element, type) {
                return type === 'page';
            },
            supportsMutation: true,
            supportsHydration: true,
            appendChildToContainer: function (parentNode, childNode) {
                appendToContainer(parentNode, childNode);
                yogaStream_1.updateYogaRoot(childNode);
            },
            insertInContainerBefore: function () { },
            removeChildFromContainer: function () { },
            prepareUpdate: function () {
                return true;
            },
            commitUpdate: function (node, updatePayload, type, oldProps, newProps) {
                renderInstance(type, node, newProps);
            },
            commitTextUpdate: function (textInstance, oldText, newText) {
                if (textInstance.type === 'TEXT_CONTAINER') {
                    textInstance.value = newText;
                }
                if (textInstance.type === 'TEXT_CONTAINER' && textInstance.parent) {
                    useTextChildren_1.setTextChildren(textInstance.parent, newText);
                }
            },
            removeChild: function (parentNode, childNode) {
                if (parentNode && parentNode.type === 'INSTANCE') {
                    return;
                }
                remove(childNode);
            },
            canHydrateInstance: function (instance, type, props) {
                if (!isReactFigmaNode_1.isReactFigmaNode(instance) ||
                    !checkInstanceMatchType(instance, type) ||
                    (instance.parent && instance.parent.type === 'INSTANCE')) {
                    return null;
                }
                return instance;
            },
            hydrateInstance: function (instance, type, props) {
                return renderInstance(type, checkInstanceMatchType(instance, type) ? instance : null, props);
            },
            getFirstHydratableChild: function (parentInstance) {
                return getFirstChild(parentInstance);
            },
            getNextHydratableSibling: function (instance) {
                return getNextChildren(instance);
            },
            didNotHydrateContainerInstance: function () { },
            didNotFindHydratableContainerInstance: function () { },
            didNotFindHydratableInstance: function () { },
            didNotFindHydratableTextInstance: function () { },
            didNotHydrateInstance: function () { },
            commitMount: function (instance, type) { },
            commitHydratedContainer: function (container) {
                container.children.forEach(function (child) {
                    if (isReactFigmaNode_1.isReactFigmaNode(child)) {
                        yogaStream_1.updateYogaRoot(child);
                    }
                });
            }
        };
        reconciler = createReconciler(HostConfig);
        container = reconciler.createContainer(rootNode, true, true);
        lastPage = figma.currentPage;
        tempPage = figma.createPage();
        figma.currentPage = tempPage;
        reconciler.updateContainer(jsx, container);
        figma.currentPage = lastPage;
        tempPage.remove();
        return [2 /*return*/];
    });
}); };
//# sourceMappingURL=renderer.js.map